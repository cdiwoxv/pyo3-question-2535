"""This is the desired Pythonic interface of the Rust library"""

from abc import Abc, abstractmethod
from dataclasses import dataclass
from typing import List

class Event(Abc):
    pass

@dataclass
class EventA(Event):
    field_a1: int
    field_a2: bool

@dataclass
class EventB(Event):
    field_b1: float
    field_b2: int

class Client(Abc):
    @abstractmethod
    def handle_event(self, event: Event):
        pass

class Driver:
    def __init__(self, clients: List[Client]):
        pass # should construct a Rust driver
    def emit_event_a(self, field_a1: int, field_a2: bool):
        pass # should use the Rust driver
    def emit_event_b(self, field_b1: float, field_b2: int):
        pass # should use the Rust driver


# ^^^ The classes above should be generated by PyO3 (or wrappers of something that generated by PyO3) ^^^^

class MyClient(Client):
    """A custom Client defined by the Python user of the library"""
    def handle_event(self, event: Event):
        match event:
            case EventA(field_a1=a1, field_a2=a2): print(f"got A(a1={a1}, a2={a2})")
            case EventB(field_b1=b1, field_b2=b2): print(f"got B(b1={b1}, b2={b2})")

def intended_usage():
    """expected way of how client will use"""
    driver = Driver([MyClient()])
    driver.emit_event_a(100, False)
    driver.emit_event_b(3.4, 20)
